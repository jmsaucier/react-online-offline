{"version":3,"sources":["useOnlineStatus.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["useOnlineStatus","useState","onlineStatus","setOnlineStatus","useEffect","window","addEventListener","removeEventListener","App","statusArray","setStatusArray","previousArray","newArray","unshift","statusTime","moment","toISOString","count","slice","Math","min","length","className","map","n","format","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOA4BeA,GC5BA,I,MDES,WACtB,MAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAoBA,OAlBAC,qBAAU,WAQR,OAPAC,OAAOC,iBAAiB,WAAW,WACjCH,GAAgB,MAElBE,OAAOC,iBAAiB,UAAU,WAChCH,GAAgB,MAGX,WACLE,OAAOE,oBAAoB,WAAW,WACpCJ,GAAgB,MAElBE,OAAOE,oBAAoB,UAAU,WACnCJ,GAAgB,SAGnB,IAEI,CACLD,kB,uBEuBWM,MAzCf,WACE,IAAON,EAAgBF,IAAhBE,aACP,EAAsCD,mBAAS,IAA/C,mBAAOQ,EAAP,KAAoBC,EAApB,KAeA,OAbAN,qBAAU,WACRM,GAAe,SAAAC,GAAkB,IAAD,EAC1BC,EAAQ,YAAOD,GAOnB,OANAC,EAASC,QAAQ,CACfX,eACAY,WAAYC,MAASC,cACrBC,QAAQ,UAAAL,EAAS,UAAT,eAAaK,QAAS,GAAK,IAG9BL,EAASM,MAAM,EAAGC,KAAKC,IAAIR,EAASS,OAAQ,WAEpD,CAACnB,IAGF,qBAAKoB,UAAU,MAAf,SACE,qBAAKA,UAAU,aAAf,SACE,kCACE,kCACE,uCACA,sCACA,2CAEF,gCACGb,EAAYc,KAAI,SAACC,GAChB,OAAO,+BACL,6BAAKA,EAAEP,QACP,6BAAKF,IAAOS,EAAEV,YAAYW,OAAO,kBACjC,6BAAKD,EAAEtB,aAAe,SAAW,cAHnBsB,EAAEV,yBCtBjBY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7cf4ee9e.chunk.js","sourcesContent":["import {useEffect, useState} from \"react\";\r\n\r\nconst useOnlineStatus = () => {\r\n  const [onlineStatus, setOnlineStatus] = useState(true);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"offline\", () => {\r\n      setOnlineStatus(false);\r\n    });\r\n    window.addEventListener(\"online\", () => {\r\n      setOnlineStatus(true);\r\n    });\r\n\r\n    return () => {\r\n      window.removeEventListener(\"offline\", () => {\r\n        setOnlineStatus(false);\r\n      });\r\n      window.removeEventListener(\"online\", () => {\r\n        setOnlineStatus(true);\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    onlineStatus\r\n  };\r\n}\r\n\r\nexport default useOnlineStatus;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport useOnlineStatus from './useOnlineStatus';\nimport { useEffect, useState, useRef } from 'react';\nimport moment from 'moment';\n\nfunction App() {\n  const {onlineStatus} = useOnlineStatus();\n  const [statusArray, setStatusArray] = useState([]);\n\n  useEffect(() => {\n    setStatusArray(previousArray => {\n      let newArray = [...previousArray];\n      newArray.unshift({\n        onlineStatus,\n        statusTime: moment().toISOString(),\n        count: (newArray[0]?.count || 0) + 1,\n      })\n  \n      return newArray.slice(0, Math.min(newArray.length, 100));\n    })\n  }, [onlineStatus])\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <table>\n          <thead>\n            <th>Count</th>\n            <th>Time</th>\n            <th>Status</th>\n          </thead>\n          <tbody>\n            {statusArray.map((n) => {\n              return <tr key={n.statusTime}>\n                <td>{n.count}</td>\n                <td>{moment(n.statusTime).format('HH:mm:ss.SSS')}</td>\n                <td>{n.onlineStatus ? 'ONLINE' : 'OFFLINE'}</td>\n              </tr>\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}