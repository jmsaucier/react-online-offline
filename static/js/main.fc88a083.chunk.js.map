{"version":3,"sources":["useOnlineStatus.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["useOnlineStatus","useWindowTop","useState","onlineStatus","setOnlineStatus","useEffect","doc","window","top","console","log","addEventListener","removeEventListener","App","setUseWindowTop","statusArray","setStatusArray","previousArray","newArray","unshift","statusTime","moment","toISOString","count","slice","Math","min","length","className","value","onChange","e","target","checked","type","map","n","format","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAgCeA,GChCA,I,MDES,SAACC,GACvB,MAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAwBA,OAtBAC,qBAAU,WAER,IAAMC,EAAML,EAAeM,OAAOC,IAAMD,OASxC,OARAE,QAAQC,IAAR,0BAA+BT,IAC/BK,EAAIK,iBAAiB,WAAW,WAC9BP,GAAgB,MAElBE,EAAIK,iBAAiB,UAAU,WAC7BP,GAAgB,MAGX,WACHK,QAAQC,IAAR,yBAA8BT,IAClCK,EAAIM,oBAAoB,WAAW,WAC/BR,GAAgB,MAElBE,EAAIM,oBAAoB,UAAU,WAChCR,GAAgB,SAGnB,CAACH,IAEG,CACLE,kB,uBE0BWU,MAhDf,WACE,MAAwCX,oBAAS,GAAjD,mBAAOD,EAAP,KAAqBa,EAArB,KACOX,EAAgBH,EAAgBC,GAAhCE,aACP,EAAsCD,mBAAS,IAA/C,mBAAOa,EAAP,KAAoBC,EAApB,KAeA,OAbAX,qBAAU,WACRW,GAAe,SAAAC,GAAkB,IAAD,EAC1BC,EAAQ,YAAOD,GAOnB,OANAC,EAASC,QAAQ,CACfhB,eACAiB,WAAYC,MAASC,cACrBC,QAAQ,UAAAL,EAAS,UAAT,eAAaK,QAAS,GAAK,IAG9BL,EAASM,MAAM,EAAGC,KAAKC,IAAIR,EAASS,OAAQ,WAEpD,CAACxB,IAGF,qBAAKyB,UAAU,MAAf,SACE,sBAAKA,UAAU,aAAf,UACE,gCACE,uBAAOC,MAAO5B,EAAc6B,SAAU,SAAAC,GAAC,OAAIjB,EAAgBiB,EAAEC,OAAOC,UAAUC,KAAK,aADrF,qBAIA,kCACE,gCACE,+BACE,uCACA,sCACA,6CAGJ,gCACGnB,EAAYoB,KAAI,SAACC,GAChB,OAAO,+BACL,6BAAKA,EAAEb,QACP,6BAAKF,IAAOe,EAAEhB,YAAYiB,OAAO,kBACjC,6BAAKD,EAAEjC,aAAe,SAAW,cAHnBiC,EAAEhB,0BC7BjBkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fc88a083.chunk.js","sourcesContent":["import {useEffect, useState} from \"react\";\r\n\r\nconst useOnlineStatus = (useWindowTop) => {\r\n  const [onlineStatus, setOnlineStatus] = useState(true);\r\n\r\n  useEffect(() => {\r\n\r\n    const doc = useWindowTop ? window.top : window;\r\n    console.log(`USE_WINDOW_TOP::${useWindowTop}`);\r\n    doc.addEventListener(\"offline\", () => {\r\n      setOnlineStatus(false);\r\n    });\r\n    doc.addEventListener(\"online\", () => {\r\n      setOnlineStatus(true);\r\n    });\r\n\r\n    return () => {\r\n        console.log(`UNLOAD EVENTS::${useWindowTop}`)\r\n    doc.removeEventListener(\"offline\", () => {\r\n        setOnlineStatus(false);\r\n      });\r\n      doc.removeEventListener(\"online\", () => {\r\n        setOnlineStatus(true);\r\n      });\r\n    };\r\n  }, [useWindowTop]);\r\n\r\n  return {\r\n    onlineStatus\r\n  };\r\n}\r\n\r\nexport default useOnlineStatus;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport useOnlineStatus from './useOnlineStatus';\nimport { useEffect, useState, useRef } from 'react';\nimport moment from 'moment';\n\nfunction App() {\n  const [useWindowTop, setUseWindowTop] = useState(false);\n  const {onlineStatus} = useOnlineStatus(useWindowTop);\n  const [statusArray, setStatusArray] = useState([]);\n\n  useEffect(() => {\n    setStatusArray(previousArray => {\n      let newArray = [...previousArray];\n      newArray.unshift({\n        onlineStatus,\n        statusTime: moment().toISOString(),\n        count: (newArray[0]?.count || 0) + 1,\n      })\n  \n      return newArray.slice(0, Math.min(newArray.length, 100));\n    })\n  }, [onlineStatus])\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <div>\n          <input value={useWindowTop} onChange={e => setUseWindowTop(e.target.checked)} type=\"checkbox\" /> Use Window Top\n        </div>\n        \n        <table>\n          <thead>\n            <tr>\n              <th>Count</th>\n              <th>Time</th>\n              <th>Status</th>\n            </tr>\n          </thead>\n          <tbody>\n            {statusArray.map((n) => {\n              return <tr key={n.statusTime}>\n                <td>{n.count}</td>\n                <td>{moment(n.statusTime).format('HH:mm:ss.SSS')}</td>\n                <td>{n.onlineStatus ? 'ONLINE' : 'OFFLINE'}</td>\n              </tr>\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}